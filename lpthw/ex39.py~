#creating a mapping of state to abbreviation
states = {
    'Oregon': 'OR'
    'Florida': 'FL'
    'California': 'CA'
    'New york': 'NY'
    'Michigan': 'MI'
}

#create a basic set of states and some cities in them

cities = {
    'CA': 'San Fransisco'
    'MI': 'Detroit'
    'FL': 'Jacksonville'
}

#add some more cities
cities ['NY'] = 'New York'
cities['OR'] = 'Portland'

#print some cities
print('-'*10)
print("NY states has", cities['NY'])
print('OR state has', citie['OR'])

#print out some states
print('-'*10)
print("Michigan's abbreviation is: ", states['Michigan'])
print("Florida's abbreviation is: ", states['Florida'])

# do it using the state thenm cities dict
print('-' * 10)
print("Michigan's abbreviation is :", states['Michigan'])
print("Florida has: ", cities[states['Florida']])

#print every state abbreviation
print('-' * 10)
for state, abbrev in list(states.items()):
    print(f"{state} is abbreviated {abbrev}")

#print every city in state
print('-' * 10)
for state, abbrev in list(cities.items()):
    print(f"{state} is abbreviated {abbrev}")

# now do both at the same time
print('-' * 10)
for state, abrev in list(stated.items()):
    print(f"{state} state is abbreviated {abbrev}")
    print(f"and has city {cities[abbrev]}")

print('-' * 10)
#safely get a abbreviation by state that might not be there
state = states.get('Texas')

if not state:
    print("Sorry. no Texas")

# get a city with a default value
city = cities.get('TX', 'Does not Exist')
print(f"The city for the state 'TX' is: {city}")
